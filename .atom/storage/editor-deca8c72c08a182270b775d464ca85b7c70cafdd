{"mode":"editor","version":1,"windowDimensions":{"x":4,"y":22,"width":1436,"height":878},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/tehgeekmeister/udacity/zippy","buffers":[{"text":"PyJWT==0.2.1\nboto==2.29.1\nnose2==0.4.7\npycrypto==2.6.1\nrequests==2.3.0\nsix==1.3.0\nwsgiref==0.1.2\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":20},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/tehgeekmeister/udacity/zippy/requirements.txt","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"b954001d27bab9ebee85cdc2736ea922616d5096","deserializer":"TextBuffer"},{"text":"{\n  \"variables\": {\n    \"cur_user_name\": \"{{env `USER`}}\",\n    \"git_sha\": \"{{env `PACKER_GIT_SHA`}}\",\n    \"git_branch\": \"{{env `PACKER_GIT_BRANCH`}}\"\n  },\n  \"builders\": [\n    {\n      \"type\": \"amazon-ebs\",\n      \"access_key\": \"AKIAIDJQY4MRVIDZKI4Q\",\n      \"secret_key\": \"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\",\n      \"region\": \"us-east-1\",\n      \"source_ami\": \"ami-b00df3d8\",\n      \"instance_type\": \"m3.medium\",\n      \"ssh_username\": \"ubuntu\",\n      \"ami_name\": \"zippy made at {{timestamp}} with git sha {{user `git_sha`}} from branch {{user `git_branch`}}\"\n    },\n    {\n      \"type\": \"virtualbox-ovf\",\n       \"source_path\": \"/Users/{{user `cur_user_name`}}/.vagrant.d/boxes/trusty64/0/virtualbox/box.ovf\",\n       \"ssh_username\": \"vagrant\",\n       \"ssh_password\": \"vagrant\",\n       \"headless\": true,\n       \"ssh_wait_timeout\": \"30s\",\n       \"shutdown_command\": \"sudo shutdown -h now\"\n    }\n  ],\n  \"provisioners\": [\n    {\n      \"type\": \"shell\",\n      \"inline\": [\n        \"wget https://apt.puppetlabs.com/puppetlabs-release-precise.deb\",\n        \"sudo dpkg -i puppetlabs-release-precise.deb\",\n        \"sudo apt-get update -qy\",\n        \"sudo apt-get install -qy puppet-common git\",\n        \"sudo puppet module install rodjek-logrotate\"\n      ]\n    },\n    {\n      \"type\": \"puppet-masterless\",\n      \"manifest_file\": \"zippy.pp\",\n      \"execute_command\": \"{{.FacterVars}}{{if .Sudo}} sudo -E {{end}}puppet apply --debug --modulepath='/tmp/packer-puppet-masterless/module-0:/etc/puppet/modules' --detailed-exitcodes {{.ManifestFile}}\"\n    },\n    {\n      \"type\": \"file\",\n      \"source\": \"zippy.tar\",\n      \"destination\": \"/tmp/zippy.tar\"\n    },\n    {\n      \"type\": \"shell\",\n      \"inline\": [\n        \"sudo chown zippy:zippy /tmp/zippy.tar\",\n        \"sudo -u zippy -i sh -c 'tar -xvvvvf /tmp/zippy.tar'\",\n        \"sudo pip -v install -r /home/zippy/requirements.txt\"\n      ]\n    }\n  ],\n  \"post-processors\": [\"vagrant\"]\n}\n","markers":{"markers":{"1":{"id":1,"range":[[19,80],[19,80]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":24,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[19,72],[19,83]]},"newParams":{"tailed":false,"range":[[19,83],[19,83]]},"deserializer":"MarkerPatch"},{"oldRange":[[19,72],[19,83]],"newRange":[[19,72],[19,73]],"oldText":"precise-4-u","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[19,73],[19,73]],"newRange":[[19,73],[19,74]],"oldText":"","newText":"r","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[19,74],[19,74]],"newRange":[[19,74],[19,75]],"oldText":"","newText":"u","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[19,75],[19,75]],"newRange":[[19,75],[19,76]],"oldText":"","newText":"s","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[19,76],[19,76]],"newRange":[[19,76],[19,77]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[19,77],[19,77]],"newRange":[[19,77],[19,78]],"oldText":"","newText":"y","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[19,78],[19,78]],"newRange":[[19,78],[19,79]],"oldText":"","newText":"6","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[19,79],[19,79]],"newRange":[[19,79],[19,80]],"oldText":"","newText":"4","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[19,0],[19,0]],"newRange":[[19,0],[20,0]],"oldText":"","newText":"       \"source_path\": \"/Users/{{user `cur_user_name`}}/.vagrant.d/boxes/precise-4-u/0/virtualbox/box.ovf\",\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[20,0],[21,0]],"newRange":[[20,0],[20,0]],"oldText":"       \"source_path\": \"/Users/{{user `cur_user_name`}}/.vagrant.d/boxes/trusty64/0/virtualbox/box.ovf\",\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[19,0],[19,0]],"newRange":[[19,0],[20,0]],"oldText":"","newText":"       \"source_path\": \"/Users/{{user `cur_user_name`}}/.vagrant.d/boxes/trusty64/0/virtualbox/box.ovf\",\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[20,0],[21,0]],"newRange":[[20,0],[20,0]],"oldText":"       \"source_path\": \"/Users/{{user `cur_user_name`}}/.vagrant.d/boxes/precise-4-u/0/virtualbox/box.ovf\",\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/tehgeekmeister/udacity/zippy/zippy.json","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"0391636709b2fe5bd5346dee051196aa99c66f30","deserializer":"TextBuffer"},{"text":"#!/bin/sh\n\nrm packer_virtualbox-ovf_virtualbox.box\nrm -rf output-virtualbox-ovf\n\ngit stash # this seems unnecessary, but it helps lock packer/puppet code to python code.\ngit remote update\n\nGIT_BRANCH=$(git symbolic-ref -q HEAD)\n\nif [ -z \"$GIT_BRANCH\" ]; then\n    echo \"Cowardly refusing to deploy a detached HEAD\"\n    exit 1\nelse\n    GIT_BRANCH=${GIT_BRANCH##refs/heads/}\nfi\n\nLOCAL_BRANCH_REF=\"`git show-ref | grep heads/$GIT_BRANCH| awk '{print $1}'`\"\nREMOTE_BRANCH_REF=\"`git show-ref | grep refs/remotes/origin/$GIT_BRANCH| awk '{print $1}'`\"\n\nif [ $LOCAL_BRANCH_REF != $REMOTE_BRANCH_REF ]; then\n  echo \"cowardly refusing to build when local and origin $GIT_BRANCH are not in sync.\"\n  exit 1\nfi\n\ngit archive --format tar $LOCAL_BRANCH_REF > zippy.tar\nPACKER_GIT_BRANCH=$GIT_BRANCH PACKER_GIT_SHA=$REMOTE_BRANCH_REF packer build --only=amazon-ebs zippy.json\nrm zippy.tar\ngit stash pop\n","markers":{"markers":{"1":{"id":1,"range":[[6,17],[6,17]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":41,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[26,76],[26,76]],"newRange":[[26,76],[26,77]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,77],[26,77]],"newRange":[[26,77],[26,78]],"oldText":"","newText":"-","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,78],[26,78]],"newRange":[[26,78],[26,79]],"oldText":"","newText":"-","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,79],[26,79]],"newRange":[[26,79],[26,80]],"oldText":"","newText":"o","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,80],[26,80]],"newRange":[[26,80],[26,81]],"oldText":"","newText":"n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,81],[26,81]],"newRange":[[26,81],[26,82]],"oldText":"","newText":"l","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,82],[26,82]],"newRange":[[26,82],[26,83]],"oldText":"","newText":"y","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,83],[26,83]],"newRange":[[26,83],[26,84]],"oldText":"","newText":"-","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"reversed":false,"range":[[26,84],[26,84]]},"newParams":{"reversed":true,"range":[[26,83],[26,84]]},"deserializer":"MarkerPatch"},{"oldRange":[[26,83],[26,84]],"newRange":[[26,83],[26,83]],"oldText":"-","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,83],[26,83]],"newRange":[[26,83],[26,84]],"oldText":"","newText":"=","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,84],[26,84]],"newRange":[[26,84],[26,85]],"oldText":"","newText":"v","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,85],[26,85]],"newRange":[[26,85],[26,86]],"oldText":"","newText":"i","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,86],[26,86]],"newRange":[[26,86],[26,87]],"oldText":"","newText":"r","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,87],[26,87]],"newRange":[[26,87],[26,88]],"oldText":"","newText":"t","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,88],[26,88]],"newRange":[[26,88],[26,89]],"oldText":"","newText":"u","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[26,89],[26,89]]},"newParams":{"range":[[26,88],[26,89]]},"deserializer":"MarkerPatch"},{"oldRange":[[26,88],[26,89]],"newRange":[[26,88],[26,88]],"oldText":"u","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[26,88],[26,88]]},"newParams":{"range":[[26,87],[26,88]]},"deserializer":"MarkerPatch"},{"oldRange":[[26,87],[26,88]],"newRange":[[26,87],[26,87]],"oldText":"t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[26,87],[26,87]]},"newParams":{"range":[[26,86],[26,87]]},"deserializer":"MarkerPatch"},{"oldRange":[[26,86],[26,87]],"newRange":[[26,86],[26,86]],"oldText":"r","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[26,86],[26,86]]},"newParams":{"range":[[26,85],[26,86]]},"deserializer":"MarkerPatch"},{"oldRange":[[26,85],[26,86]],"newRange":[[26,85],[26,85]],"oldText":"i","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[26,85],[26,85]]},"newParams":{"range":[[26,84],[26,85]]},"deserializer":"MarkerPatch"},{"oldRange":[[26,84],[26,85]],"newRange":[[26,84],[26,84]],"oldText":"v","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,84],[26,84]],"newRange":[[26,84],[26,85]],"oldText":"","newText":"a","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,85],[26,85]],"newRange":[[26,85],[26,86]],"oldText":"","newText":"m","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,86],[26,86]],"newRange":[[26,86],[26,87]],"oldText":"","newText":"a","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,87],[26,87]],"newRange":[[26,87],[26,88]],"oldText":"","newText":"z","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,88],[26,88]],"newRange":[[26,88],[26,89]],"oldText":"","newText":"o","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,89],[26,89]],"newRange":[[26,89],[26,90]],"oldText":"","newText":"n","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,90],[26,90]],"newRange":[[26,90],[26,91]],"oldText":"","newText":"-","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,91],[26,91]],"newRange":[[26,91],[26,92]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,92],[26,92]],"newRange":[[26,92],[26,93]],"oldText":"","newText":"b","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,93],[26,93]],"newRange":[[26,93],[26,94]],"oldText":"","newText":"s","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,0],[26,0]],"newRange":[[26,0],[27,0]],"oldText":"","newText":"PACKER_GIT_BRANCH=$GIT_BRANCH PACKER_GIT_SHA=$REMOTE_BRANCH_REF packer build zippy.json\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[27,0],[28,0]],"newRange":[[27,0],[27,0]],"oldText":"PACKER_GIT_BRANCH=$GIT_BRANCH PACKER_GIT_SHA=$REMOTE_BRANCH_REF packer build --only=amazon-ebs zippy.json\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,0],[26,0]],"newRange":[[26,0],[27,0]],"oldText":"","newText":"PACKER_GIT_BRANCH=$GIT_BRANCH PACKER_GIT_SHA=$REMOTE_BRANCH_REF packer build --only=amazon-ebs zippy.json\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[27,0],[28,0]],"newRange":[[27,0],[27,0]],"oldText":"PACKER_GIT_BRANCH=$GIT_BRANCH PACKER_GIT_SHA=$REMOTE_BRANCH_REF packer build zippy.json\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,0],[26,0]],"newRange":[[26,0],[27,0]],"oldText":"","newText":"PACKER_GIT_BRANCH=$GIT_BRANCH PACKER_GIT_SHA=$REMOTE_BRANCH_REF packer build zippy.json\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[27,0],[28,0]],"newRange":[[27,0],[27,0]],"oldText":"PACKER_GIT_BRANCH=$GIT_BRANCH PACKER_GIT_SHA=$REMOTE_BRANCH_REF packer build --only=amazon-ebs zippy.json\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,0],[26,0]],"newRange":[[26,0],[27,0]],"oldText":"","newText":"PACKER_GIT_BRANCH=$GIT_BRANCH PACKER_GIT_SHA=$REMOTE_BRANCH_REF packer build --only=amazon-ebs zippy.json\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[27,0],[28,0]],"newRange":[[27,0],[27,0]],"oldText":"PACKER_GIT_BRANCH=$GIT_BRANCH PACKER_GIT_SHA=$REMOTE_BRANCH_REF packer build zippy.json\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,76],[26,76]],"newRange":[[26,76],[26,77]],"oldText":"","newText":" ","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,77],[26,77]],"newRange":[[26,77],[26,78]],"oldText":"","newText":"-","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,78],[26,78]],"newRange":[[26,78],[26,79]],"oldText":"","newText":"-","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,79],[26,79]],"newRange":[[26,79],[26,80]],"oldText":"","newText":"d","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,80],[26,80]],"newRange":[[26,80],[26,81]],"oldText":"","newText":"e","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,81],[26,81]],"newRange":[[26,81],[26,82]],"oldText":"","newText":"b","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,82],[26,82]],"newRange":[[26,82],[26,83]],"oldText":"","newText":"u","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,83],[26,83]],"newRange":[[26,83],[26,84]],"oldText":"","newText":"g","normalizeLineEndings":{},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,0],[26,0]],"newRange":[[26,0],[27,0]],"oldText":"","newText":"PACKER_GIT_BRANCH=$GIT_BRANCH PACKER_GIT_SHA=$REMOTE_BRANCH_REF packer build zippy.json\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[27,0],[28,0]],"newRange":[[27,0],[27,0]],"oldText":"PACKER_GIT_BRANCH=$GIT_BRANCH PACKER_GIT_SHA=$REMOTE_BRANCH_REF packer build --debug --only=amazon-ebs zippy.json\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,0],[26,0]],"newRange":[[26,0],[27,0]],"oldText":"","newText":"PACKER_GIT_BRANCH=$GIT_BRANCH PACKER_GIT_SHA=$REMOTE_BRANCH_REF packer build --debug --only=amazon-ebs zippy.json\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[27,0],[28,0]],"newRange":[[27,0],[27,0]],"oldText":"PACKER_GIT_BRANCH=$GIT_BRANCH PACKER_GIT_SHA=$REMOTE_BRANCH_REF packer build zippy.json\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,77],[26,85]],"newRange":[[26,77],[26,77]],"oldText":"--debug ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,0],[26,0]],"newRange":[[26,0],[27,0]],"oldText":"","newText":"PACKER_GIT_BRANCH=$GIT_BRANCH PACKER_GIT_SHA=$REMOTE_BRANCH_REF packer build zippy.json\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[27,0],[28,0]],"newRange":[[27,0],[27,0]],"oldText":"PACKER_GIT_BRANCH=$GIT_BRANCH PACKER_GIT_SHA=$REMOTE_BRANCH_REF packer build --only=amazon-ebs zippy.json\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,0],[26,0]],"newRange":[[26,0],[27,0]],"oldText":"","newText":"PACKER_GIT_BRANCH=$GIT_BRANCH PACKER_GIT_SHA=$REMOTE_BRANCH_REF packer build --only=amazon-ebs zippy.json\n","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[27,0],[28,0]],"newRange":[[27,0],[27,0]],"oldText":"PACKER_GIT_BRANCH=$GIT_BRANCH PACKER_GIT_SHA=$REMOTE_BRANCH_REF packer build zippy.json\n","newText":"","normalizeLineEndings":{"normalizeLineEndings":false},"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/tehgeekmeister/udacity/zippy/packer_build.sh","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"144b5b6776f31977a703ea9bb0d782237991eaaf","deserializer":"TextBuffer"},{"text":"import base64\nimport cStringIO\nimport itertools\nimport json\nimport logging\nimport os\nimport sys\nimport time\nimport traceback\nimport zipfile\n\nfrom Crypto.PublicKey import RSA\nimport jwt\nimport requests\n\nimport zippy.s3\n\n\nPOLLING_INTERVAL = 900 # this is seconds! 15 minutes (most of the time).\nGOOGLE_ACCOUNT_ID = '1069728276824-2uvq09l4tiplc0gf30rskdsgvtam6k1j@developer.gserviceaccount.com'\nGOOGLE_TASKQUEUE_CONSUMER_SCOPE = 'https://www.googleapis.com/auth/taskqueue.consumer'\nMAX_RETRIES = 3\nGAE_APP = None # we set this later so the module is importable without the environment variable set.\nNUM_TASKS_PER_ROUND = 10\nLEASE_SECONDS = 120\n\n\ndef jwtClaimset(account_id, scope, aud='https://accounts.google.com/o/oauth2/token', exp=None,\n    iat=None):\n    \"\"\"Create a JWT claimset for a Google API call.\n\n    Args:\n\n      account_id: (string) this should be the email account id.\n      scope: (string or list) the scope(s) of the requests you intend to make. should be listed in\n          the API in question.\n      aud: (string) according to the docs, this should always be https://accounts.google.com/o/oauth2/token.\n          change at your own peril.\n      exp: (int) when the assertion made with this claimset should expire. defaults to about an hour\n          from now.\n      iat: (int) what time the assertion made with this claimset will be treated as created at.\n          defaults to now.\n\n    Returns a dict representing the JSON for the claimset, to be passed to jwt.encode.\n    \"\"\"\n\n    invocation_time = int(time.time())\n    if exp == None:\n        exp = invocation_time + 3500\n    if iat == None:\n        iat = invocation_time\n\n    assert exp > iat\n    return {\n       \"iss\": account_id,\n       \"scope\": scope if isinstance(scope, str) or isinstance(scope, unicode) else ' '.join(scope),\n       \"aud\": aud,\n       \"exp\": exp,\n       \"iat\": iat\n    }\n\n\ndef jwtAssertion(claimset, key):\n    \"\"\"Creates a JWT assertion given a private key and a claimset.\n\n    Args:\n        claimset: (dict) a JWT claimset as a JSON-y python datastructure, as created by jwtClaimset.\n        key: (PyCrypto Key) a private key.\n\n    Returns a JWT assertion encoded as appropriate for requesting an access token from google.\n    \"\"\"\n\n    return jwt.encode(claimset, key, 'RS256')\n\n\ndef getAccessToken(assertion):\n    \"\"\"Gets an access token from Google's OAuth endpoint.\n\n    Args:\n        assertion: (string) an assertion as retrieved from jwtAssertion.\n\n    Returns an access token to be used in other API requests.\n    \"\"\"\n\n    response = requests.post(\n        'https://accounts.google.com/o/oauth2/token',\n        data={\n            'assertion': assertion,\n            'grant_type': 'urn:ietf:params:oauth:grant-type:jwt-bearer'\n        }\n    )\n    response.raise_for_status()\n    return response.json()['access_token']\n\n\ndef leaseTasks(access_token, number_of_tasks, lease_seconds):\n    \"\"\"Leases a number of tasks and returns the JSON representation of them.\n\n    Args:\n        access_token: (string) an access token as retrieved from Google's OAuth servers (perhaps\n            using getAccessToken).\n        number_of_tasks: (int) how many tasks to fetch. Currently defaults to 5.\n        lease_seconds: (int) how long to lease the tasks for. Currently defaults to 900 seconds\n            (five minutes).\n\n    Returns the parsed JSON representation of the tasks.\n    \"\"\"\n\n    response = requests.post(\n        'https://www.googleapis.com/taskqueue/v1beta2/projects'\n        '/s~%s/taskqueues/zip-regenerations/tasks/lease' % (GAE_APP),\n        params={\n            'leaseSecs': lease_seconds,\n            'numTasks': number_of_tasks\n        },\n        headers={'Authorization': 'Bearer ' + access_token}\n    )\n    response.raise_for_status()\n    return response.json()\n\n\ndef completeTask(access_token, task_id):\n    \"\"\"Completes a task, given the task id and an access_token.\n\n    Args:\n        access_token: (string) an access token as retrieved from Google's OAuth servers (perhaps\n            using getAccessToken).\n        task_id: (string) the task to complete.\n\n    Returns the parsed JSON representation of the tasks.\n    \"\"\"\n\n    response = requests.delete(\n        'https://www.googleapis.com/taskqueue/v1beta2/projects'\n        '/s~%s/taskqueues/zip-regenerations/tasks/%s' % (GAE_APP, task_id),\n        headers={'Authorization': 'Bearer ' + access_token}\n    )\n    response.raise_for_status()\n\n\nclass VideoSpecError(Exception):\n    pass\n\n\ndef videoInfoFromSpec(spec, directories=()):\n    \"\"\"Transforms a zip spec into a list of dicts of info necessary to add the files to the zip.\n\n    Args:\n        spec: (dict) this is a zip spec of the same structure as the GAE producer makes.\n        directories: (array of strings) this will nest *all* contents of the resulting zip under\n            folders of the names in this array, in left-to-right as top-to-bottom order.\n\n    Returns a list of dicts with path, url, and md5 entries.\n    \"\"\"\n\n    directories = list(directories)\n    assert spec is not None\n    if 'contents' in spec:\n        return itertools.chain.from_iterable(\n            [videoInfoFromSpec(subspec, directories=(directories + [spec['name']]))\n                for subspec in spec['contents'] if subspec]\n        )\n    elif 'url' in spec:\n        # This is a list because it makes the code in the branch above *much* simpler.\n        # See also: this is actually a list monad.\n        return [{\n            'path': (directories + [spec['name']]),\n            'url': spec['url'],\n            'md5': spec['md5']\n        }]\n    else:\n        raise VideoSpecError, \"Zip spec entries must have either contents or url attributes.\"\n\n\ndef extractTask(task):\n    \"\"\"Given a task, extract the spec.\"\"\"\n\n    return json.loads(base64.urlsafe_b64decode(str(task['payloadBase64'])))\n\n\ndef postbackSuccess(postback_url, bucket, resource):\n    postback(\n        postback_url,\n        data = {\n            'status': 'done',\n            'bucket': bucket,\n            'resource': resource,\n        }\n    )\n\n\ndef postbackException(postback_url):\n    postback(postback_url,\n        data = {\n            'status':'failed',\n            'error': traceback.format_exc()\n        }\n    )\n\n\ndef postback(postback_url, data):\n    requests.post(postback_url, data=data)\n\n\ndef setupLoggers():\n    logging.getLogger().setLevel(logging.DEBUG)\n    fmt_string = '%(asctime)s,%(msecs)dZ level:%(levelname)s pid:%(process)s module:%(module)s %(message)s'\n    date_string = '%Y-%m-%dT%H:%M:%S'\n\n    # set up the file handler for logrotated stuff\n    file_handler = logging.handlers.WatchedFileHandler('/var/log/zippy/zippy.log')\n    file_handler.setFormatter(logging.Formatter(fmt_string, date_string))\n    logging.getLogger().addHandler(file_handler)\n\n    # log to stdout until we have daemonizing\n    stream_handler = logging.StreamHandler(sys.stdout)\n    stream_handler.setFormatter(logging.Formatter(fmt_string, date_string))\n    logging.getLogger().addHandler(stream_handler)\n\n    # use gmt in log messages.\n    logging.Formatter.converter = time.gmtime\n\n\ndef main(argv=None):\n    if argv is None:\n        argv = sys.argv\n\n    # TODO: might be time to consider a config framework of some sort if we need to add much more.\n    global GAE_APP\n    GAE_APP = os.environ['GAE_APP']\n\n    # can't automate this portion, unlike the bit below. oh well!\n    global NUM_TASKS_PER_ROUND\n    global LEASE_SECONDS\n\n    for attr in ['NUM_TASKS_PER_ROUND', 'LEASE_SECONDS']:\n        if attr in os.environ:\n            NUM_TASKS_PER_ROUND = os.environ[attr]\n\n    setupLoggers()\n\n    with open('./udacityu-key.pem', 'r') as key_file:\n        key = RSA.importKey(key_file.read())\n\n    # should be more like \"while there wasn't a signal that means we should exit gracefully\", at\n    # least logically speaking. what's the right way to do that?\n    while True:\n        claimset = jwtClaimset(\n            GOOGLE_ACCOUNT_ID,\n            GOOGLE_TASKQUEUE_CONSUMER_SCOPE\n        )\n        assertion = jwtAssertion(claimset, key)\n        access_token = getAccessToken(assertion)\n        tasks = leaseTasks(access_token, NUM_TASKS_PER_ROUND, LEASE_SECONDS)\n        if 'items' in tasks:\n            for raw_task in tasks['items']:\n                task = extractTask(raw_task)\n                spec = task['spec']\n\n                # TODO: should perhaps be an option in the task for making these compressed, for non\n                # video zips?\n\n                the_zip_string = cStringIO.StringIO()\n                # the compression setting we use here is the default, but we set it anyway for the\n                # sake of communicating the intent: these are zips of compressed objects, so we\n                # don't want to compress them.\n                the_zip = zipfile.ZipFile(\n                    the_zip_string,\n                    'w',\n                    allowZip64=True,\n                    compression=zipfile.ZIP_STORED\n                )\n                try:\n                    for video_info in list(videoInfoFromSpec(spec)):\n                        if not 'url' in video_info:\n                            logging.error(\n                                'no way to download file from this video_info (%r) derived '\n                                'from this spec (%r)' % (video_info, spec)\n                            )\n                            continue\n\n                        retries_so_far = 0\n                        response = None\n                        while not response:\n                            try:\n                                response = requests.get(video_info['url'])\n                            except (HTTPError, ConnectionError):\n                                logging.exception(\n                                    'attempted to download %s, retrying %i times more' %\n                                    (video_info['url'], MAX_RETRIES - retries_so_far)\n                                )\n                                retries_so_far += 1\n                                if retries_so_far > MAX_RETRIES:\n                                    raise VideoSpecError, 'failed to download, skipping this zip.'\n\n                        response.raise_for_status()\n\n                        the_zip.writestr(\n                            '/'.join(video_info['path']),\n                            response.content\n                        )\n\n                    the_zip.close()\n                    the_zip_string = the_zip_string.getvalue()\n\n                    if len(the_zip_string) < 200: # seems useful?\n                        logging.warn(\n                            'the zip is suspiciously small. it looks like: %r' % the_zip_string\n                        )\n\n                    zippy.s3.uploadZip(the_zip_string, task['resource'], task['bucket'])\n                    logging.info('uploaded zip \"%s\"' % task['resource'])\n                    completeTask(access_token, raw_task['id'])\n\n                    postbackSuccess(task['postback_url'], task['bucket'], task['resource'])\n\n                except VideoSpecError:\n                    logging.exception('Caught a VideoSpecError, this zip task will be skipped.')\n                    postbackException(task['postback_url'])\n                    continue # continue explicitly in case more gets added below\n                except (requests.RequestException, Exception):\n                    logging.exception('unexpected error')\n                    postbackException(task['postback_url'])\n                    continue # continue explicitly in case more gets added below\n        else:\n            logging.info(\"no items at the moment, sleeping.\")\n            time.sleep(POLLING_INTERVAL)\n\n\nif __name__ == '__main__':\n    exit(main())\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":49},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/tehgeekmeister/udacity/zippy/zippy/server.py","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"5a4ce451ad380f50198a7b711ed29f21470d07a5","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":20,"softTabs":true,"displayBuffer":{"id":21,"softWrap":false,"editorWidthInChars":152,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/tehgeekmeister/udacity/zippy/requirements.txt","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":49,"softTabs":true,"displayBuffer":{"id":50,"softWrap":false,"editorWidthInChars":152,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/tehgeekmeister/udacity/zippy/zippy/server.py","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":24,"softTabs":true,"displayBuffer":{"id":25,"softWrap":false,"editorWidthInChars":152,"scrollTop":406,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/tehgeekmeister/udacity/zippy/zippy.json","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":41,"softTabs":true,"displayBuffer":{"id":42,"softWrap":false,"editorWidthInChars":152,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/tehgeekmeister/udacity/zippy/packer_build.sh","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/tehgeekmeister/udacity/zippy/packer_build.sh","focused":false,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/tehgeekmeister/udacity/zippy/requirements.txt":1403931213519,"/Users/tehgeekmeister/udacity/zippy/zippy/server.py":1403931214987,"/Users/tehgeekmeister/udacity/zippy/zippy.json":1403957363935,"/Users/tehgeekmeister/udacity/zippy/packer_build.sh":1403957364517},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":186641283},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/tehgeekmeister/udacity/zippy/packer_build.sh","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}